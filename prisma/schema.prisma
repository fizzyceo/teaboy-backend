generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id Int @id @default(autoincrement())

  name     String?
  email    String    @unique
  password String?
  phone    String?
  
  role     USER_ROLE @default(NORMAL_USER)

  signedUp Boolean? 

  canCallTeaboy Boolean? @default(true)

  image_url   String? 
  isDeleted Boolean? @default(false)
  // email verification
  isVerified            Boolean   @default(false) 
  verificationToken     String?    @unique
  verificationExpires   DateTime? 

  resetPasswordToken    String?   @unique
  resetPasswordExpires  DateTime? 

  phoneOS     OS_TYPE? @default(android)
  userLanguage LANGUAGE? @default(EN)
  
  orders Order[]
  spaces Space[] @relation("UserSpaces")
  sites  Site[]  @relation("UserSites")
  calls  Call[]
 
  kitchen_id Int?
  kitchen    Kitchen? @relation(fields: [kitchen_id], references: [kitchen_id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Entreprise Entreprise[]
}


model Entreprise{
  ent_id Int @id @default(autoincrement())
  image_url String
  name String
  owner_id Int
  owner User @relation(fields: [owner_id], references: [user_id])

  Site Site[]
}

model Site {
  site_id Int @id @default(autoincrement())

  name        String
  name_ar     String?

  description String? @default("")
  phone       String?
  address     String?
  address_ar String?
  image_url   String?

  latitude  Float?
  longitude Float? 
  owner_id Int? 
  spaces Space[]
  menus  Menu[]  @relation("SiteMenus")
  users  User[]  @relation("UserSites")
  ent_id Int?
  entreprise Entreprise? @relation(fields: [ent_id], references: [ent_id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum SPACE_TYPE {
  MAJLISS
  OFFICE
  DEPARTMENT
}


model Space {
  space_id Int @id @default(autoincrement())

  name String
  name_ar String?
  type SPACE_TYPE @default(DEPARTMENT)

  site_id Int
  site    Site @relation(fields: [site_id], references: [site_id], onDelete: Cascade)

  kitchen_id Int?
  kitchen    Kitchen? @relation(fields: [kitchen_id], references: [kitchen_id])
  default_lang String? @default("EN")

  links SpaceUserLink[]
  orders Order[]
  calls  Call[]
  menus  Menu[]  @relation("SpaceMenus")
  users  User[]  @relation("UserSpaces")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model SpaceUserLink {
  link_id Int @id @default(autoincrement())
  space_id Int
  space Space @relation(fields:[space_id], references: [space_id], onDelete: Cascade)

  user_email String


}

model Menu {
  menu_id Int @id @default(autoincrement())
  currency         String? @default("$")
  currency_ar      String? 
  name             String?
  name_ar          String?
  ask_for_name  Boolean @default(false)
  ask_for_table Boolean @default(false)

  menu_items Menu_Item[]
  orders     Order[]
  sites      Site[]      @relation("SiteMenus")
  spaces     Space[]     @relation("SpaceMenus")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Menu_Item {
  menu_item_id Int @id @default(autoincrement())

  title       String
  title_ar     String?
  description String? @default("")
  price       Float
  available   Boolean @default(true)

  item_images      ItemImages[]
  menuItem_options MenuItemOptionConnection[]
  order_items      Order_Item[]

  menu_id Int
  menu    Menu @relation(fields: [menu_id], references: [menu_id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Menu_Item_Option {
  menu_item_option_id Int @id @default(autoincrement())

  name String
  name_ar  String?
  default_choice_id Int?                     @unique
  default_choice    Menu_Item_Option_Choice? @relation("DefaultChoice", fields: [default_choice_id], references: [menu_item_option_choice_id])

  choices          Menu_Item_Option_Choice[]  @relation("OptionChoices")
  option_menuItems MenuItemOptionConnection[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Menu_Item_Option_Choice {
  menu_item_option_choice_id Int @id @default(autoincrement())

  name String
  name_ar String?

  menu_Item_Option Menu_Item_Option? @relation("DefaultChoice")

  menu_item_option_id Int
  menu_item_option    Menu_Item_Option @relation("OptionChoices", fields: [menu_item_option_id], references: [menu_item_option_id], onDelete: Cascade)

  order_item_choices Order_Item_Choice[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MenuItemOptionConnection {
  menu_item_id Int
  menu_item    Menu_Item @relation(fields: [menu_item_id], references: [menu_item_id], onDelete: Cascade)

  menu_item_option_id Int
  menu_item_option    Menu_Item_Option @relation(fields: [menu_item_option_id], references: [menu_item_option_id], onDelete: Cascade)

  @@id([menu_item_id, menu_item_option_id])
}

model Order {
  order_id Int @id @default(autoincrement())

  order_number  String
  customer_name String?
  table_number  Int?
  scheduled_at  DateTime?

  menuId Int
  menu   Menu @relation(fields: [menuId], references: [menu_id], onDelete: Cascade)

  spaceId Int
  space   Space @relation(fields: [spaceId], references: [space_id], onDelete: Cascade)

  userId Int?
  user   User? @relation(fields: [userId], references: [user_id])

  order_items Order_Item[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order_Item {
  order_item_id Int @id @default(autoincrement())

  note     String?
  quantity Int?
  status   OrderStatus

  menu_item_id Int
  menu_item    Menu_Item @relation(fields: [menu_item_id], references: [menu_item_id], onDelete: Cascade)

  order_id Int
  order    Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  choices Order_Item_Choice[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order_Item_Choice {
  order_item_choice_id Int @id @default(autoincrement())

  menu_item_option_choice_id Int
  menu_item_option_choice    Menu_Item_Option_Choice @relation(fields: [menu_item_option_choice_id], references: [menu_item_option_choice_id], onDelete: Cascade)

  order_item_id Int
  order_item    Order_Item @relation(fields: [order_item_id], references: [order_item_id], onDelete: Cascade)
}

model ItemImages {
  item_image_id Int @id @default(autoincrement())

  image_url String

  menu_item_id Int
  menu_item    Menu_Item @relation(fields: [menu_item_id], references: [menu_item_id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum USER_ROLE {
  SUPER_ADMIN
  ADMIN
  TEABOY
  NORMAL_USER
}
enum LANGUAGE {
  EN
  AR
}
enum OS_TYPE {
  android
  ios

}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  DELIVERED
  CANCELLED
}

enum CALL_STATUS {
  STARTED
  ANSWERED
  COMPLETED
  FAILED
}

model Call {
  call_id    Int      @id @default(autoincrement())
  user_id    Int
  User       User     @relation(fields: [user_id], references: [user_id],onDelete: Cascade)
  space_id   Int
  Space      Space    @relation(fields: [space_id], references: [space_id],onDelete: Cascade)

  status     CALL_STATUS @default(STARTED)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Kitchen {
  kitchen_id Int     @id @default(autoincrement())
  name       String
  name_ar    String?
  token       String    @unique
  isOpen     Boolean @default(true)
  isWeeklyTimingOn Boolean @default(false)

  spaces       Space[]
  Teaboys      User[]
  openingHours OpeningHours[]
  tablets KitchenTablet[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OpeningHours {
  openingHours_id Int       @id @default(autoincrement())
  dayOfWeek       DayOfWeek
  openTime        String
  closeTime       String

  timezone String?

  kitchen_id Int
  kitchen    Kitchen @relation(fields: [kitchen_id], references: [kitchen_id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model KitchenTablet{
  kitchenTablet_id Int @id @default(autoincrement())

  kitchen_id Int
  kitchen    Kitchen @relation(fields: [kitchen_id], references: [kitchen_id])

  fcmToken String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
